version: 2.1
# Use a package of configuration called an orb.
#            ls ~/.ssh
#            ssh-add -K ~/.ssh/id_rsa_8496f10979577d18e548a3a3f1e15015
orbs:
  ansible-playbook: orbss/ansible-playbook@0.0.5
commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
jobs:
  configure_infrastructure:
    docker:
#      - image: cimg/python:3.10.0
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["84:96:f1:09:79:57:7d:18:e5:48:a3:a3:f1:e1:50:15"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
#            apk add openssh-client
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main.yml -u ec2-user
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1

  smoke_test:
    docker:
     - image: alpine:latest
    steps:
     - run: apk add --update curl
     - run:
         name: smoke test
         command: |
           URL="https://blog.udacity.com/"
           # Test if website exists
           if curl -s --head ${URL} 
           then
             echo "it's work"
             return 0
           else
             return 1
           fi
  smoke_test_faild:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command: |
            return 1
      - when:
          condition: on_fail
          steps:
              - destroy_environment


# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
   #   - configure_infrastructure
       - create_infrastructure
       - smoke_test_faild:
           required: create_infrastructure

